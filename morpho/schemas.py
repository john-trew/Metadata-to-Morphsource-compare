"""Core data schemas for the :mod:`morpho` query toolkit.

This module centralises the light-weight data structures used across the
package.  The project deliberately avoids introducing a heavy dependency such
as Pydantic because the orchestrator is intended to run in restricted
environments (e.g. offline validation or Jupyter notebooks shipping with this
repository).

The schemas lean on :mod:`dataclasses` for convenience while exposing utility
helpers to serialise instances into primitives that can easily be JSON
encoded.  These helpers keep the rest of the package agnostic of the concrete
classes used here which keeps future refactors simple.
"""
from __future__ import annotations

from dataclasses import dataclass, field, asdict
from enum import Enum
from typing import Any, Dict, List, Mapping, MutableMapping, Optional


class EndpointName(str, Enum):
    """Canonical names for Morphosource API endpoints supported by this toolkit."""

    SEARCH = "search"
    MEDIA = "media"
    COLLECTIONS = "collections"


@dataclass
class TaxonResolution:
    """Represents the outcome of attempting to resolve a user supplied taxon."""

    input_name: str
    matched_name: Optional[str]
    rank: Optional[str]
    confidence: float
    notes: Optional[str] = None

    def to_dict(self) -> Dict[str, Any]:
        """Serialise the resolution into a JSON friendly mapping."""

        payload = asdict(self)
        return payload


@dataclass
class QueryIntent:
    """Normalised representation of a user's natural language request."""

    raw_text: str
    taxon: Optional[TaxonResolution]
    keywords: List[str] = field(default_factory=list)
    filters: MutableMapping[str, Any] = field(default_factory=dict)
    media_types: List[str] = field(default_factory=list)
    limit: int = 50
    page_size: int = 25
    sort: Optional[str] = None

    def to_dict(self) -> Dict[str, Any]:
        """Return a serialisable copy of the intent."""

        intent_dict = asdict(self)
        if self.taxon is not None:
            intent_dict["taxon"] = self.taxon.to_dict()
        return intent_dict


@dataclass
class APIRequest:
    """A concrete API request that can be executed by :class:`MorphoClient`."""

    endpoint: EndpointName
    method: str
    path: str
    params: MutableMapping[str, Any] = field(default_factory=dict)
    page: int = 1
    page_size: int = 25

    def to_dict(self) -> Dict[str, Any]:
        payload = asdict(self)
        payload["endpoint"] = self.endpoint.value
        return payload


@dataclass
class APIResponse:
    """Captures an API response along with useful metadata for the router."""

    request: APIRequest
    status_code: Optional[int]
    data: Optional[Mapping[str, Any]]
    error: Optional[str] = None

    def to_dict(self) -> Dict[str, Any]:
        payload = {
            "request": self.request.to_dict(),
            "status_code": self.status_code,
            "error": self.error,
            "data": self.data,
        }
        return payload


@dataclass
class RoutedQueryPlan:
    """A plan generated by :class:`~morpho.router.QueryRouter`."""

    intent: QueryIntent
    requests: List[APIRequest]

    def to_dict(self) -> Dict[str, Any]:
        return {
            "intent": self.intent.to_dict(),
            "requests": [req.to_dict() for req in self.requests],
        }


@dataclass
class SummarisedResult:
    """High level description of a query run."""

    total_records: int
    sample: List[Mapping[str, Any]] = field(default_factory=list)
    notes: Optional[str] = None

    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)


def as_serialisable(obj: Any) -> Any:
    """Convert supported schema instances to built-in types recursively."""

    if isinstance(obj, (TaxonResolution, QueryIntent, APIRequest, APIResponse, RoutedQueryPlan, SummarisedResult)):
        return obj.to_dict()
    if isinstance(obj, dict):
        return {key: as_serialisable(value) for key, value in obj.items()}
    if isinstance(obj, (list, tuple)):
        return [as_serialisable(item) for item in obj]
    return obj


__all__ = [
    "EndpointName",
    "TaxonResolution",
    "QueryIntent",
    "APIRequest",
    "APIResponse",
    "RoutedQueryPlan",
    "SummarisedResult",
    "as_serialisable",
]
