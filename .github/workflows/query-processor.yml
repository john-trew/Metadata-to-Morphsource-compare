name: Query Processor

on:
  workflow_dispatch:
    inputs:
      query:
        description: 'Query text to process'
        required: true
        type: string
      issue_number:
        description: 'Issue number to post results to (optional)'
        required: false
        type: string
  repository_dispatch:
    types: [query_request]

jobs:
  query-formatter:
    name: ChatGPT Query Formatter
    runs-on: ubuntu-latest
    outputs:
      formatted_query: ${{ steps.format.outputs.formatted_query }}
      api_params: ${{ steps.format.outputs.api_params }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai
      
      - name: Extract query
        id: get-query
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "query=${{ inputs.query }}" >> $GITHUB_OUTPUT
          else
            echo "query=${{ github.event.client_payload.query }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Format query with ChatGPT
        id: format
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - <<'EOF'
          import os
          import json
          import sys
          from openai import OpenAI

          query = "${{ steps.get-query.outputs.query }}"
          
          print(f"Formatting query with ChatGPT: {query}")
          
          api_key = os.environ.get('OPENAI_API_KEY')
          if not api_key:
              print("✗ OPENAI_API_KEY not configured")
              # Fallback to using raw query
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"formatted_query={query}\n")
                  f.write(f'api_params={{"q": "{query}", "per_page": 10}}\n')
              sys.exit(0)
          
          try:
              client = OpenAI(api_key=api_key)
              
              # Ask ChatGPT to format the query for MorphoSource API
              system_prompt = "You are an expert at formatting natural language queries into MorphoSource API search parameters. Extract the core scientific search terms from the user query, removing conversational words. The API accepts 'q' (query string) and 'per_page' (number of results, max 100) parameters. Return a JSON object with 'search_query' and 'api_params' fields. Examples: 'Tell me about lizard specimens' becomes {\"search_query\": \"lizard\", \"api_params\": {\"q\": \"lizard\", \"per_page\": 10}}. Return ONLY valid JSON, no other text."

              messages = [
                  {
                      "role": "system",
                      "content": system_prompt
                  },
                  {
                      "role": "user",
                      "content": f"Format this query for MorphoSource API: {query}"
                  }
              ]
              
              response = client.chat.completions.create(
                  model="gpt-4",
                  messages=messages,
                  temperature=0.3,
                  max_tokens=200
              )
              
              result_text = response.choices[0].message.content.strip()
              print(f"ChatGPT response: {result_text}")
              
              # Parse the JSON response
              try:
                  result = json.loads(result_text)
                  formatted_query = result.get('search_query', query)
                  api_params = result.get('api_params', {'q': formatted_query, 'per_page': 10})
              except json.JSONDecodeError:
                  # Fallback if JSON parsing fails
                  print("Warning: Could not parse JSON response, using original query")
                  formatted_query = query
                  api_params = {'q': query, 'per_page': 10}
              
              print(f"✓ Formatted query: {formatted_query}")
              print(f"✓ API params: {json.dumps(api_params)}")
              
              # Save to output file for artifact
              with open('formatted_query.json', 'w') as f:
                  json.dump({
                      'original_query': query,
                      'formatted_query': formatted_query,
                      'api_params': api_params
                  }, f, indent=2)
              
              # Set output for next job
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"formatted_query={formatted_query}\n")
                  f.write(f"api_params={json.dumps(api_params)}\n")
          
          except Exception as e:
              print(f"✗ Error: {str(e)}")
              # Fallback to using raw query
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"formatted_query={query}\n")
                  f.write(f'api_params={{"q": "{query}", "per_page": 10}}\n')
          EOF
      
      - name: Upload Formatted Query
        uses: actions/upload-artifact@v4
        with:
          name: formatted-query
          path: formatted_query.json

  morphosource-api:
    name: MorphoSource API Query
    runs-on: ubuntu-latest
    needs: query-formatter
    outputs:
      results: ${{ steps.search.outputs.results }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Download Formatted Query
        uses: actions/download-artifact@v4
        with:
          name: formatted-query
      
      - name: Search MorphoSource
        id: search
        env:
          MORPHOSOURCE_API_KEY: ${{ secrets.MORPHOSOURCE_API_KEY }}
          FORMATTED_QUERY: ${{ needs.query-formatter.outputs.formatted_query }}
          API_PARAMS: ${{ needs.query-formatter.outputs.api_params }}
        run: |
          python - <<'EOF'
          import os
          import json
          import requests
          import sys

          formatted_query = os.environ.get('FORMATTED_QUERY', '')
          api_params_str = os.environ.get('API_PARAMS', '{}')
          
          try:
              api_params = json.loads(api_params_str)
          except:
              api_params = {'q': formatted_query, 'per_page': 10}
          
          api_key = os.environ.get('MORPHOSOURCE_API_KEY', '')
          
          print(f"Searching MorphoSource with formatted query: {formatted_query}")
          print(f"API parameters: {json.dumps(api_params)}")
          
          # MorphoSource API configuration
          MORPHOSOURCE_API_BASE = "https://www.morphosource.org/api"
          
          headers = {}
          if api_key:
              headers['Authorization'] = f'Bearer {api_key}'
          
          try:
              # Search specimens
              search_url = f"{MORPHOSOURCE_API_BASE}/specimens"
              
              response = requests.get(search_url, params=api_params, headers=headers, timeout=30)
              
              if response.status_code == 200:
                  data = response.json()
                  print(f"✓ Found results from specimens endpoint")
                  print(json.dumps(data, indent=2))
                  
                  # Save to output
                  with open('morphosource_results.json', 'w') as f:
                      json.dump(data, f, indent=2)
                  
                  # Set output (truncated for GitHub Actions)
                  results_summary = {
                      "status": "success",
                      "count": len(data.get('specimens', [])),
                      "formatted_query": formatted_query
                  }
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(f"results={json.dumps(results_summary)}\n")
              else:
                  print(f"⚠ API returned status {response.status_code}")
                  print(f"Response: {response.text[:500]}")
                  
                  error_data = {
                      "status": "error",
                      "code": response.status_code,
                      "message": response.text[:200]
                  }
                  with open('morphosource_results.json', 'w') as f:
                      json.dump(error_data, f, indent=2)
                  
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(f"results={json.dumps(error_data)}\n")
          
          except Exception as e:
              print(f"✗ Error: {str(e)}")
              error_data = {"status": "error", "message": str(e)}
              with open('morphosource_results.json', 'w') as f:
                  json.dump(error_data, f, indent=2)
              
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"results={json.dumps(error_data)}\n")
              sys.exit(1)
          EOF
      
      - name: Upload MorphoSource Results
        uses: actions/upload-artifact@v4
        with:
          name: morphosource-results
          path: morphosource_results.json

  chatgpt-processing:
    name: ChatGPT Query Processing
    runs-on: ubuntu-latest
    needs: [query-formatter, morphosource-api]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai requests
      
      - name: Download MorphoSource Results
        uses: actions/download-artifact@v4
        with:
          name: morphosource-results
      
      - name: Download Formatted Query
        uses: actions/download-artifact@v4
        with:
          name: formatted-query
      
      - name: Extract query
        id: get-query
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "query=${{ inputs.query }}" >> $GITHUB_OUTPUT
          else
            echo "query=${{ github.event.client_payload.query }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Process with ChatGPT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - <<'EOF'
          import os
          import json
          from openai import OpenAI

          query = "${{ steps.get-query.outputs.query }}"
          
          print(f"Processing query with ChatGPT: {query}")
          
          # Load MorphoSource results
          try:
              with open('morphosource_results.json', 'r') as f:
                  morphosource_data = json.load(f)
          except Exception as e:
              print(f"Warning: Could not load MorphoSource results: {e}")
              morphosource_data = {}
          
          # Load formatted query information
          formatted_query_info = {}
          try:
              with open('formatted_query.json', 'r') as f:
                  formatted_query_info = json.load(f)
          except Exception as e:
              print(f"Warning: Could not load formatted query: {e}")
          
          api_key = os.environ.get('OPENAI_API_KEY')
          if not api_key:
              print("✗ OPENAI_API_KEY not configured")
              result = {
                  "status": "error",
                  "message": "OPENAI_API_KEY not configured"
              }
              with open('chatgpt_response.json', 'w') as f:
                  json.dump(result, f, indent=2)
              exit(0)
          
          try:
              client = OpenAI(api_key=api_key)
              
              # Build context with MorphoSource data
              context = f"User query: {query}\n\n"
              
              if formatted_query_info:
                  context += f"Formatted search query: {formatted_query_info.get('formatted_query', 'N/A')}\n"
                  context += f"API parameters used: {json.dumps(formatted_query_info.get('api_params', {}))}\n\n"
              
              context += "MorphoSource API Results:\n"
              context += json.dumps(morphosource_data, indent=2)
              
              messages = [
                  {
                      "role": "system",
                      "content": "You are a helpful assistant that answers questions about MorphoSource data. The user's natural language query has been automatically formatted into a MorphoSource API search query. Use the provided API results to give accurate, informative responses about the specimens found."
                  },
                  {
                      "role": "user",
                      "content": context
                  }
              ]
              
              response = client.chat.completions.create(
                  model="gpt-4",
                  messages=messages,
                  max_tokens=1000
              )
              
              answer = response.choices[0].message.content
              print(f"✓ ChatGPT Response:\n{answer}")
              
              result = {
                  "status": "success",
                  "query": query,
                  "response": answer,
                  "morphosource_summary": morphosource_data.get('status', 'unknown')
              }
              
              with open('chatgpt_response.json', 'w') as f:
                  json.dump(result, f, indent=2)
              
              print("\n" + "="*60)
              print("FINAL RESPONSE")
              print("="*60)
              print(answer)
              print("="*60)
          
          except Exception as e:
              print(f"✗ Error: {str(e)}")
              result = {
                  "status": "error",
                  "message": str(e)
              }
              with open('chatgpt_response.json', 'w') as f:
                  json.dump(result, f, indent=2)
          EOF
      
      - name: Upload ChatGPT Response
        uses: actions/upload-artifact@v4
        with:
          name: chatgpt-response
          path: chatgpt_response.json
      
      - name: Summary
        run: |
          echo "## Query Processing Complete ✓" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Query:** ${{ steps.get-query.outputs.query }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **MorphoSource Results:** ${{ needs.morphosource-api.outputs.results }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f chatgpt_response.json ]; then
            echo "🤖 **ChatGPT Response:**" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat chatgpt_response.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Post results to issue
        if: ${{ inputs.issue_number != '' }}
        env:
          ISSUE_NUMBER: ${{ inputs.issue_number }}
          QUERY: ${{ steps.get-query.outputs.query }}
          MORPHOSOURCE_RESULTS: ${{ needs.morphosource-api.outputs.results }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const issueNumber = parseInt(process.env.ISSUE_NUMBER || '0');
            
            if (!issueNumber) {
              console.log('No issue number provided, skipping comment');
              return;
            }
            
            try {
              // Read the ChatGPT response
              let responseText = 'Processing completed. See workflow artifacts for details.';
              
              if (fs.existsSync('chatgpt_response.json')) {
                const responseData = JSON.parse(fs.readFileSync('chatgpt_response.json', 'utf8'));
                
                if (responseData.status === 'success' && responseData.response) {
                  responseText = responseData.response;
                } else if (responseData.status === 'error') {
                  responseText = '⚠️ Error: ' + responseData.message;
                }
              }
              
              const query = process.env.QUERY || 'N/A';
              const morphosourceResults = process.env.MORPHOSOURCE_RESULTS || '{}';
              
              // Build the comment body
              const commentBody = '## ✅ Query Processing Complete\n\n' +
                '**Query:** ' + query + '\n\n' +
                '---\n\n' +
                '### 🤖 ChatGPT Response\n\n' +
                responseText + '\n\n' +
                '---\n\n' +
                '### 📊 MorphoSource API Results\n\n' +
                '```json\n' +
                morphosourceResults + '\n' +
                '```\n\n' +
                '---\n\n' +
                '**View full details:** [Workflow Run](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId + ')\n\n' +
                '*Download artifacts from the workflow run for complete JSON responses.*';
              
              // Post comment with results
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: commentBody
              });
              
              // Update issue labels
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['query-request', 'completed'],
                state: 'closed'
              });
              
              console.log('Successfully posted results to issue #' + issueNumber);
              
            } catch (error) {
              console.error('Error posting to issue:', error);
              // Don't fail the workflow if posting fails
            }
